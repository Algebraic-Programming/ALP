# default settings based on standard Docker image for reproducible build:
# see https://github.com/Algebraic-Programming/ReproducibleBuilds
default:
  tags:
    - docker
  image: ${CI_REGISTRY}/${CI_PROJECT_PATH}/lpf-ubuntu-20.04-gcc

variables:
  IS_MAIN_PIPELINE: "no"

workflow:
  rules:
  # the following rules trigger after new commits are merged on master, develop or a version/rc branch
    - if: $CI_COMMIT_BRANCH == "master"
      variables:
        IS_MAIN_PIPELINE: "yes"
    - if: $CI_COMMIT_BRANCH == "develop"
      variables:
        IS_MAIN_PIPELINE: "yes"
    - if: $CI_COMMIT_BRANCH =~ /^v.*-rc.*$/
      variables:
        IS_MAIN_PIPELINE: "yes"
    - when: always  # trigger pipeline in any case


.strip_symbols: &strip_symbols
  - strip -s $(find tests/unit/ -type f -executable -print) $(find tests/smoke/ -type f -executable -print) $(find tests/performance/ -type f -executable -print)

# Build / test / install on CentOS 8, only for main branches

#build_centos_8:
#  image: centos:8
#  needs: []
#  rules:
#    - if: $IS_MAIN_PIPELINE == "yes"
#      when: on_success
#    - when: never
#  before_script:
#    - yum -y update && yum -y groupinstall "Development Tools" && yum -y install make autoconf cmake numactl-devel
#  script:
#    - rm -rf build install && mkdir -p install build && cd ./build && ../bootstrap.sh --prefix=../install && make -j$(nproc) && make -j$(nproc) build_tests_all
#    - *strip_symbols
#  artifacts:
#    paths:
#      - build/
#    exclude:
#      - build/**/*.o
#      - build/**/*.o.d
#    expire_in: 80 minutes


#build_debug_centos_8:
#  image: centos:8
#  needs: []
#  before_script:
#    - yum -y update && yum -y groupinstall "Development Tools" && yum -y install make autoconf cmake numactl-devel
#  script:
#    - mkdir -p install build && cd ./build && ../bootstrap.sh --prefix=../install --debug-build && make -j$(nproc) && make -j$(nproc) build_tests_all
#  rules:
#    - if: $IS_MAIN_PIPELINE == "yes"
#      when: on_success
#    - when: never


#test_centos_8_unit:
#  image: centos:8
#  needs: [build_centos_8]
#  rules:
#    - if: $IS_MAIN_PIPELINE == "yes"
#      when: on_success
#    - when: never
#  before_script:
#    - yum -y update && yum -y groupinstall "Development Tools" && yum -y install make autoconf cmake numactl-devel
#  script:
#    - cd ./build && make -j$(nproc) tests_unit &> unittests.log
#    - ../tests/summarise.sh unittests.log


#test_centos_8_smoke:
#  image: centos:8
#  needs: [build_centos_8]
#  rules:
#    - if: $IS_MAIN_PIPELINE == "yes"
#      when: on_success
#    - when: never
#  before_script:
#    - yum -y update && yum -y groupinstall "Development Tools" && yum -y install make autoconf cmake numactl-devel
#  script:
#    - cd ./build && make -j$(nproc) tests_smoke &> smoketests.log
#    - ../tests/summarise.sh smoketests.log


#test_centos_8_performance:
#  image: centos:8
#  needs: [build_centos_8]
#  rules:
#    - if: $IS_MAIN_PIPELINE == "yes"
#      when: on_success
#    - when: never
#  before_script:
#    - yum -y update && yum -y groupinstall "Development Tools" && yum -y install make autoconf cmake numactl-devel
#  script:
#    - cd ./build &&  make -j$(nproc) tests_performance &> performancetests.log
#    - ../tests/summarise.sh performancetests.log tests/performance/output/benchmarks tests/performance/output/scaling


#test_centos_8_installation:
#  image: centos:8
#  needs: [build_centos_8]
#  rules:
#    - if: $IS_MAIN_PIPELINE == "yes"
#      when: on_success
#    - when: never
#  before_script:
#    - yum -y update && yum -y groupinstall "Development Tools" && yum -y install make autoconf cmake numactl-devel
#  script:
#    - cd ./build && make -j$(nproc) install


# Main testing on Ubuntu, all branches

build_test:
  needs: []
  script:
    - mkdir -p install build && cd ./build && ../bootstrap.sh --prefix=../install --with-datasets=${ALP_DATASETS} && make -j$(nproc) build_tests_all
    - *strip_symbols
  artifacts:
    paths:
      - build/
    exclude:
      - build/**/*.o
      - build/**/*.o.d
      - build/**/CMakeFiles
      - build/**/*.dir
    expire_in: 80 minutes


build_tests_buildtype_debug_sym_debug:
  needs: []
  script:
    - mkdir -p install build && cd build && cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_FLAGS=-D_DEBUG -DCMAKE_C_FLAGS=-D_DEBUG -DCMAKE_BUILD_TYPE=Debug ../ && make -j$(nproc) build_tests_all


build_tests_sym_debug:
  rules:
    - if: $IS_MAIN_PIPELINE == "yes"
      when: on_success
    - when: never
  needs: []
  script:
    - mkdir -p install build && cd build && cmake -DCMAKE_INSTALL_PREFIX=../install -DCMAKE_CXX_FLAGS=-D_DEBUG -DCMAKE_C_FLAGS=-D_DEBUG -DLPF_INSTALL_PATH=${LPF_PATH} -DCMAKE_BUILD_TYPE=Release ../ && make -j$(nproc) build_tests_all


tests_unit:
  needs: [build_test]
  script:
    - cd ./build && make -j$(nproc) tests_unit &> unittests.log
    - ../tests/summarise.sh unittests.log

tests_smoke:
  needs: [build_test]
  script:
    - cd ./build && make -j$(nproc) tests_smoke &> smoketests.log
    - ../tests/summarise.sh smoketests.log

test_installation:
  needs: [build_test]
  script:
    - cd ./build && make -j$(nproc) install


build_test_buildtype_debug:
  needs: []
  script:
    - mkdir -p install build && cd ./build && ../bootstrap.sh --prefix=../install --with-datasets=${ALP_DATASETS} --debug-build && make -j$(nproc) && make -j$(nproc) build_tests_all
    - *strip_symbols
  artifacts:
    paths:
      - build/
    exclude:
      - build/**/*.o
      - build/**/*.o.d
    expire_in: 43 minutes

test_smoke_build_type_debug:
  needs: [build_test_buildtype_debug]
  script:
    - cd ./build && make -j$(nproc) smoketests &> smoketests.log
    - ../tests/summarise.sh smoketests.log

test_installation_build_type_debug:
  needs: [build_test_buildtype_debug]
  script:
    - cd ./build && make -j$(nproc) install

gitleaks:
  needs: []
  image:
    name: "zricethezav/gitleaks:v8.0.6"
    entrypoint: [""]
  script: gitleaks detect -v --source .


## Additional tests specific to main branches only

tests_performance:
  rules:
    - if: $IS_MAIN_PIPELINE == "yes"
      when: on_success
    - when: never
  needs: [build_test]
  script:
    - cd ./build && make -j$(nproc) performancetests &> performancetests.log
    - ../tests/summarise.sh performancetests.log tests/performance/output/benchmarks tests/performance/output/scaling

tests_unit_buildtype_debug:
  rules:
    - if: $IS_MAIN_PIPELINE == "yes"
      when: on_success
    - when: never
  needs: [build_test_buildtype_debug]
  script:
    - cd ./build && make -j$(nproc) unittests &> unittests.log
    - ../tests/summarise.sh unittests.log


## Additional tests for LPF (on main branches only)

build_test_lpf:
  rules:
    - if: $IS_MAIN_PIPELINE == "yes"
      when: always
    - when: never
  needs: []
  script:
# build only LPF-related tests
    - mkdir -p install build && cd ./build && ../bootstrap.sh --with-lpf=${LPF_PATH} --no-nonblocking --no-reference --no-hyperdags --prefix=../install --with-datasets=${ALP_DATASETS} && make -j$(nproc) build_tests_all
    - *strip_symbols
  artifacts:
    paths:
      - build/
    exclude:
      - build/**/*.o
      - build/**/*.o.d
      - build/**/CMakeFiles
      - build/**/*.dir
    expire_in: 80 minutes

tests_unit_lpf:
  rules:
    - if: $IS_MAIN_PIPELINE == "yes"
      when: on_success
    - when: never
  needs: [build_test_lpf]
  script:
    - cd ./build && make -j$(nproc) tests_unit &> unittests.log
    - ../tests/summarise.sh unittests.log

tests_smoke_lpf:
  rules:
    - if: $IS_MAIN_PIPELINE == "yes"
      when: on_success
    - when: never
  needs: [build_test_lpf]
  script:
    - cd ./build && make -j$(nproc) tests_smoke &> smoketests.log
    - ../tests/summarise.sh smoketests.log

test_installation_lpf:
  rules:
    - if: $IS_MAIN_PIPELINE == "yes"
      when: on_success
    - when: never
  needs: [build_test_lpf]
  script:
    - cd ./build && make -j$(nproc) install

## Additional jobs to build againt multiple compilers (on main branches only)

build_test_gcc_versions:
  rules:
    - if: $IS_MAIN_PIPELINE == "yes"
      when: on_success
    - when: never
  image: ${CI_REGISTRY}/${CI_PROJECT_PATH}/lpf-ubuntu-22.04-gcc-clang
  needs: []
  parallel:
      matrix:
        - CXX_COMPILER: g++
          CC_COMPILER: gcc
          VER: [9,10,11,12]
        # - CXX_COMPILER: clang++
        #   CC_COMPILER: clang
        #   VER: [11,12,13,14]
  script:
    - mkdir -p install build && cd ./build && CXX=${CXX_COMPILER}-${VER} CC=${CC_COMPILER}-${VER} ../bootstrap.sh --prefix=../install --with-datasets=${ALP_DATASETS} --with-lpf=${LPF_BASE_PATH}/build_mpich_${CC_COMPILER}_${VER}/install && make -j$(nproc) build_tests_all
