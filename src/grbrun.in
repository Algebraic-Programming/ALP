#!/bin/bash

#
#   Copyright 2021 Huawei Technologies Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

BACKENDS=(@AVAILABLE_BACKENDS_SPACED@)
BACKENDRUNENV=(@BACKEND_RUNENV_SPACED@)
BACKENDRUNNER=(@BACKEND_RUNNER_SPACED@)

declare -a ARGS
SHOW="eval"
BACKEND=${BACKENDS[0]}
help="no"

function print_help {
	local this_bin="$1"
	local BACKEND=$2
	local RUNNER=$3

	echo "* Runs an ALP/GraphBLAS binary by calling an underlying runner and by passing needed flags."
	echo
	echo "USAGE: ${this_bin} [ALP-specific options...] [--] [runner arguments...] <ALP/GraphBLAS binary> [binary arguments...]"
	echo
	echo "ALP-specific options:"
	echo "  -b,--backend <backend>  run against the ALP/GraphBLAS backend <backend>; possible values: ${BACKENDS[@]}; default: reference"
	echo "  --show                  show the full run command WITHOUT executing it"
	echo "  --help                  display this help"
	echo "  -- <args...>            pass all the following <args...> arguments directly to the underlying runner"
	echo
	echo "* Selected backend: ${BACKEND}"
	if [[ -z "${RUNNER}" ]]; then
		# shared-memory backends have no runner
		echo "* No custom runner: running the given ALP/GraphBLAS binary directly"
	else
		echo "* Underlying runner: ${RUNNER}"
		echo "* Underlying runner help:"
		echo
		exec ${RUNNER} --help
	fi
}

while [[ $# -gt 0 ]]; do
	option="$1"
	shift;
	case ${option} in
		-b|--backend)
			BACKEND=$1
			shift
		;;
		--show)
			SHOW=echo
		;;
		--help)
			help="yes"
		;;
		--)
			break
		;;
		*)
			ARGS+=("${option}")
		;;
	esac
done

BACKENDID=-1
for i in "${!BACKENDS[@]}"; do
	if [[ "${BACKENDS[$i]}" = "${BACKEND}" ]]
	then
		BACKENDID=$i
		break
	fi
done

if [[ ${BACKENDID} -eq -1 ]]
then
	echo "Could not find requested backend \`${BACKEND}'"
	exit 255
fi

RUNNER=${BACKENDRUNNER[${BACKENDID}]}
LD_PATH="@ALP_UTILS_INSTALL_DIR@:${BACKENDRUNENV[${BACKENDID}]}"

if [[ "${help}" == "yes" ]]; then
	print_help "$(realpath $0)" ${BACKEND} ${RUNNER}
	exit 0
fi

${SHOW} LD_LIBRARY_PATH="\"${LD_PATH}:${LD_LIBRARY_PATH}\"" ${RUNNER} "${ARGS[@]}" "$@"

